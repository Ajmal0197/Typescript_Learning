#### **Beginner Level**

1. **What is TypeScript, and how does it differ from JavaScript?**  
   TypeScript is a statically typed superset of JavaScript that compiles to plain JavaScript. It provides enhanced tooling, type safety, and the ability to catch errors during development, which makes it more robust for large-scale applications.

2. **What are the basic types in TypeScript?**  
   The basic types in TypeScript include `number`, `string`, `boolean`, `null`, `undefined`, `any`, `void`, `never`, and `symbol`.

3. **How do you declare a variable with a specific type in TypeScript?**  
   You declare a variable with a specific type using the following syntax:  
   ```typescript
   let age: number = 30;
   ```

4. **What is an interface in TypeScript?**  
   An interface is a way to define a contract for classes or objects, specifying the structure (properties and methods) they should adhere to. It helps in defining clear and consistent APIs.

5. **What is the purpose of `type` and `interface` in TypeScript?**  
   Both `type` and `interface` are used to define shapes of objects and functions.  
   - `interface` is ideal for defining object structures and can be extended or implemented by classes.  
   - `type` is more flexible and can define union, intersection, and complex types.

---

#### **Intermediate Level**

6. **What are TypeScript enums, and how are they used?**  
   Enums allow you to define a set of named constants, which can be either numeric or string-based. They help in creating a more readable and maintainable code by grouping related constants.  
   ```typescript
   enum Direction { Up, Down, Left, Right }
   let move: Direction = Direction.Up;
   ```

7. **Explain the concept of union types in TypeScript.**  
   Union types allow a variable to hold multiple types, providing flexibility while maintaining type safety.  
   ```typescript
   let value: number | string;
   value = 42;
   value = "Hello";
   ```

8. **How do you handle optional properties in TypeScript?**  
   Optional properties are declared with a question mark (`?`) after the property name. This indicates that the property is not required.  
   ```typescript
   interface User { 
     name: string; 
     age?: number; 
   }
   ```

9. **What are generics in TypeScript, and why are they useful?**  
   Generics allow you to create reusable components that work with any data type. They provide a way to write flexible, yet type-safe code.  
   ```typescript
   function identity<T>(arg: T): T {
     return arg;
   }
   ```

10. **What is type inference in TypeScript?**  
    Type inference is the ability of TypeScript to automatically determine the type of a variable based on its initial value or usage, reducing the need for explicit type annotations.

---

#### **Advanced Level**

11. **What are type guards, and how do they work?**  
    Type guards are functions or constructs that help TypeScript narrow down the type of a variable within a conditional block, enabling more precise type checking and reducing runtime errors.  
    ```typescript
    function isString(value: any): value is string {
      return typeof value === 'string';
    }
    ```

12. **Explain TypeScriptâ€™s type mapping and utility types like `Partial`, `Pick`, and `Record`.**  
    - `Partial<T>` makes all properties of type `T` optional.  
    - `Pick<T, K>` creates a new type by selecting a subset of properties `K` from type `T`.  
    - `Record<K, T>` constructs an object type with keys of type `K` and values of type `T`.

13. **How does TypeScript handle module resolution, and what are the different strategies available?**  
    TypeScript handles module resolution based on configuration options such as `baseUrl`, `paths`, and `moduleResolution`. The two main strategies are:  
    - **Node.js:** Follows the Node.js module resolution algorithm.  
    - **Classic:** Used in legacy TypeScript projects, follows a simpler resolution strategy.

14. **What are declaration files (`.d.ts`), and how are they used?**  
    Declaration files provide type information for JavaScript libraries, enabling TypeScript to understand the types used in non-TypeScript code, thus allowing type checking and better tooling.

15. **How do you work with advanced types like mapped types and conditional types in TypeScript?**  
    - **Mapped types** create new types by transforming properties of an existing type.  
    - **Conditional types** allow defining types based on conditions.  
    Example:  
    ```typescript
    type TrueFalse<T> = T extends true ? 'Yes' : 'No';
    ```

---

#### **Additional Topic: Tuples**

- **What is a tuple in TypeScript, and how do you use it?**  
  A tuple is a special type of array that allows you to define a fixed number of elements with specific types.  
  ```typescript
  let person: [string, number] = ["Alice", 30];
  ```

- **Why do we use tuples in TypeScript?**  
  Tuples are useful for representing fixed structures with known types, such as a pair of values or function return types with multiple values.

- **Advanced: What is a potential loophole or limitation when using tuples in TypeScript?**  
  - **Length and Type Enforcement:** While tuples enforce the type and order of elements, they don't strictly enforce the length beyond the defined elements.  
  - **Immutability:** Tuples are mutable by default, which can be problematic if you expect the structure to remain unchanged after initialization.  
  - **Complex Manipulation:** Operations like sorting or filtering can be complex with tuples due to their fixed and strictly typed structure.  

  **Example of Tuple Loophole:**
  ```typescript
  let person: [string, number] = ["Alice", 30];
  person[2] = "New Value"; // TypeScript allows this assignment, but it exceeds the defined tuple length.
  ```
